<para>
There are multiple references all around the web, eg:

http://forums.mozillazine.org/viewtopic.php?f=19&t=958465
http://benjamin.smedbergs.us/blog/2008-09-22/when-linking-the-order-of-your-command-line-can-be-important/
https://developer.mozilla.org/en/xpcom_glue

Which reference the exact order of terms in the linker call being very important. One of them even references the exact problem we're seeing as being able to be resolved with correct linker call order (though they are in the xpcom glue case, not MOZILLA_INTERNAL_API). I have fiddled with the linker call a bit but either I haven't hit on exactly the right order yet, or we are having some other, related problem.
</para>
<para>
I think I'm going to try to get it to link properly in 1.9.1 because that was before they stopped exporting unfrozen symbols from libxul. Because of this I should be able to just follow the linking directions on the xpcom_glue page for Internal API linking
</para>
<para>
Version 191 seems to exhibit the same behavior, complaining about kPStaticModules and kStaticModuleCount being undefined if libxul is not linked against, but complianing about undefined references.

I looked at the xpcom_glue page on MDC again and it turns out 191 also doesn't export the symbols from libxul (and so has the same problem). The change was between versions 1.8.* and 1.9.*
</para>
<para>
it seems like the way to go is to figure out how the cpp code for the python support (pyXPCOM and pyXPCOM Extension, possibly also pyDOM?) is built and linked, as that is internal code.
</para>
<para>
this seems like it may be helpful:
https://developer.mozilla.org/en/Adding_XPCOM_components_to_Mozilla_build_system
</para>t
<para>
I think we should probably be modeling our build sequence after the xpcom components that ship within the mozilla system, since we are using the internal API.

I'm going to go dig around a bit in the log file I created during the build process (its not very new but that shouldn't matter).
</para>
<para>
I noticed in makefile.in for the autocomplete xpcom component they defined LIB_XUL=1, I think its possible we need to do that since we are having to link against libxul
</para>
<para>
For some reason version 1.9.1 has the python extension ship with it, but the 1.9.2 version does not. I'm building 1.9.1 and shoving the output into a log file so I can look at what python is doing.
</para>
<para>
I am having trouble finding where in the log the python extension is built from cpp code. The obvious things such as searching for python and pyGBase do not work.

It looks like it doesn't actually get built by default when you build mozilla/firefox. We need to add --enable-extensions=python\xpcom

BUT the extension doesn't compile properly, instead erroring out of the build process!!

../../../../_javagen/default/org/mozilla/interfaces/nsIPythonTestInterface.java:21: integer number too large: 4294967295
  int BiggerLong = 4294967295;
</para>
