<para>
changed the way I include -fPIC in .mozconfig file from 
mk_add_options CPPFLAGS=@CPPFLAGS@-fPIC
to
mk_add_options CPPFLAGS+=-fPIC

I suspect this is equivalent but I am recompiling just in case
</para>
<para>
Despite the above, it seems like we should be able to get rid of 
the problem without manually messing with the CPPFLAGS. Here is a
link to someone who got the same issue when trying to compile the 
sample component from the online book (weblock). 
http://www.mailinglistarchive.com/html/dev-extensions@lists.mozilla.org/2010-03/msg00001.html

Its possible that our fix of that by forcing -fPIC into all the compile steps
broke something else?
</para>
<para>
  I looked up ranlib. It creates an index within a .a (archive) file which
speeds up loading and allows elements in the archive to call eachother
without regard to their order/position in the archive.

nm -s will display the index once it has been created by ranlib
</para>
<para>
Apparently all code compiled to use XPCOM headers/functionality needs to 
include xpcom-config.h (according to https://developer.mozilla.org/en/xpcom_glue)
We were not doing this for Revaluator, but I have added it to RXPCOM.h

It's possible we don't need to do this currently because we are using MOZILLA_INTERNAL_API, but from what the webpage said we probably shouldn't be.
</para>
<para>
*** I think it may be a problem that we're using -DMOZILLA_INTERNAL_API, but currently we can't make Revaluator.o without it. From MDC:
"
Mozilla internal code defines MOZILLA_INTERNAL_API while compiling and links against xpcom.lib and xpcom_core.lib. In almost all cases embedders should *not* use internal linkage. Components using internal linkage will have shared-library dependencies against non-frozen symbols in the XPCOM libraries, and will not work with any other versions of XPCOM other than the one it was compiled against.

Internal linkage will be unavailable to extension authors in XULRunner 1.9 (Firefox 3) because the nonfrozen symbols will not be exported from libxul. Extension and application authors currently using internal linkage should read the guide on Migrating from Internal Linkage to Frozen Linkage.
"
</para>
<para>
From the above, it looks like if we need to use MOZILLA_INTERNAL_API then we should be linking against libxpcom.so and something called xpcom_core.lib, NOT libxpcomglue_s

This is an issue because libxpcom_core.a is NOT in the sdk!
</para>
<para>
After making this change, it still isn't linking. In fact, it still claims that NS_GetServiceManager is undefined, as well as other symbols (which I don't understand because NS_GetServiceManager IS defined in libxpcom.so). 
At least some of the symbols are in libxul, so I'll try linking against that.

This did not fix the issue. Going to go back and try something simpler.
</para>
<para>
***So in Revaluator.cpp, we actually undefine then reprototype NS_GetServiceManager.m
Could this be causing the problems with it being undefined during the linking phase?

Removing the undef/reprototype code from Revaluator.cpp causes the linker to stop complaining about NS_GetServiceManager being undefined.

However, now the problem is that NS_GetServiceManager_P is undefined, but for some reason is included in Revaluator.o as an undefined symbol.

NS_GetServiceManager_P seems to be the Internal (non-frozen) API version of the frozen method NS_GetServiceManager.

Because we are using MOZILLA_INTERNAL_API, all the frozen symbols get redefined to their non-frozen internal counterparts, eg:
  #define NS_GetServiceManager NS_GetServiceManager_P

The only place in xulrunner-sdk/lib that a symbol called NS_GetServiceManager_P is actually defined is in libxul.so

This is because they stopped exporting the non-frozen symbols from libxul to libxpcom after 1.9 (see XPCOM GLUE page).

I'm not sure how Duncan convinced this to compile before but to do it the Right Way (and possibly just to do it at all) we need to choose between the XPCOM GLUE route (strongly recommended by MDC) _OR_ the MOZILLA_INTERNAL_API route. Currently we are trying to mix them and I think this is causing a lot of our problems (or even if not, contributing significantly to the confusion that IS causing them)
</para>
<para>
*******
I got it to sucessfully link by linking against ONLY the .o files we generate and libxul.so

This is dangerous and definitely not best practice, but it is somewhere to move forward from. I think our code will need to be linked against the exact version of libxul that Firefox is using to get it to load properly (or possibly at all).
</para>
<para>
Currently the test pages don't work. The component is not getting registered properly. This is not that surprising, though, because I had to link against libxul, which I don't think extensions are supposed to do.
<para>
I was able to build everything in inst/components using the non -fPIC'ed xulrunner build.

I think it was the Installation of the R Package that gives us trouble without -fPIC.

Nope, the R Package will install fine using the non -fPICed sdk. Whatever was causing the problems we were seeing was a symptom of something else.

I'm going to recompile xulrunner without -fPIC again just to make sure the buildI THINK didn't have -fPIC actually didn't have -fPIC 

Yep, it compiles, installs, and loads fine. Its not clear that my earlier attempts to add -fPIC to the CPPFLAGS for the mozilla build process actually did anything.
</para>


<para>
The reason we can't compile the inst/component stuff without -DMOZILLA_INTERNAL_API is that RVariant.cpp requires nsVariant.h, which uses the non-frozen internal string API, instead of the frozen one.
</para>
<para> 
I'm going to see if I can get weblock to compile, just to make sure there isn't something more fundamentally wrong with my sdk builds.
</para>
<para>
Reading more of the XPCOM online Book about Weblock as I look for the code/build instructions
</para>
<para>
There are three core XPCOM component management interfaces:
<ol>
<li>nsIComponentManager creates objects and retrieves information about their implementation</li>
<li>

</para>
<para>
Wasn't able to find the actual Weblock sourcecode easily (it appears in the book pages but I didn't see a way to download the whole codebase).
 
I found a building a c++ component tutorial. It's for windows but hopefully I'll be able to adapt the code and get it to install 
 

