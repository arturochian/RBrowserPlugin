<?xml version="1.0" encoding="utf-8"?>
<article xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en"
	 xmlns:r="http://www.r-project.org"
	 xmlns:js="http://www.ecma-international.org/publications/standards/Ecma-262.htm">
<info>
  <title>Communicating Between R and Javascript Using RFirefox</title>
</info>
<sect1>
  <title>Invoking R Code in a Webpage</title>
  <sect2>
    <title>Running R code on Startup</title>
    <para>
      R code can be set to be run as soon as a web page is loaded by including it in an R script tag. This functionality can be used to define R functions which will later be used as event handlers, as well as to set up any R objects which will be used by later R function calls. It can also be used to draw graphics or write results to the webpage for cases which do not require user interaction.
    </para>
    <para>
      Like all script tags, R script tags can be placed anywhere in the HTML document, but are generally placed within the head tag.  These tags behave similarly to javascript script tags (though the js tags are evaluated before the web page has loaded while R script tags are run after). R script tags also nearly identical to js script tags in their construction as can be seen below.
    </para>
    <para>
      A JavaScript script tag:
      <programlisting>
	<![CDATA[
	<script type="text/javascript">
	  var x = "hello";
	  alert(x + " world");
	</script>
	]]>
      </programlisting>
      This script tag can be identified as javascript by the value of its type attribute, which is "text/javascript". The text within the script tag is JavaScript code which will be evaluated as the script tag is being processed by the web browser as the page loads.
    </para>
    <para>
      An R script tag:
      <programlisting>
	<![CDATA[
	<script type="text/R">
	  #generate some data!
	  x = rnorm(100)
	  y = rnorm(100, x^2, 1)

	  newdata = function()
	  {
	    x <<- rnorm(100)
	    y <<- rnorm(100, x^2, 1)
	    TRUE
	  }
	</script>
	]]>
      </programlisting>
      The type attribute (set to "text/R") in the above script tag indicates that it contains R code, which must be passed to the R engine for parsing and evaluation (this is done automatically by javascript contained in the RFirefox extension itself and does not require any additional action by the author of the page beyond setting the type attribute on the tag).
    </para>
    <para>
      In particular, we can see that the above R script tag will, when evaluated, create two numeric vectors, x and y, as well as a function, newdata, in the global R environment. These objects will persist for as long as the instance of firefox is open, so long as they are not removed or overwritten by subsequent R code.
    </para>
    <para>
      Script tags, regardless of type, have the option to indicate an external file where the associated code is stored, rather than including the code as text withing the tag. R script tags are no different, and this can be achieved uing the src tag attribute as follows:
      <programlisting>
	<![CDATA[
	<script type="text/R" src="myRCode.R"></script>
	]]>
      </programlisting>
      The above R script tag indicates that its associated R code is stored on disk in the file myRCode.R. When the tag is evaluated, that code will be loaded from the file and run as if it had been contained within the tag directly in the html file.
    </para>
    <para>
      NOTE: It is important to have separate beginning and ending tags for an R script element, even when the associated code is included using the src attribute. Due to the mechanism used to find and evaluate the tags, self-closing R script tags will not be found and thus their code will not be run.
    </para>
    <para>
      NOTE: While all code in all R script tags will be run once the page is loaded, the results will not be returned to/stored on the javascript side (all objects will still exist as normal on the R side).
    </para>
  </sect2>
  <sect2>
    <title>Calling R functions from JavaScript Code</title>
    <para>
      In addition to blocks of R code found in R script tags, we can also invoke R functions directly by name (or "reference", more on this later) from JavaScript code. The mechanism used to do this is somewhat circuitous under the hood, but it is necessary for security reasons, and is quite transparent to the end user. To do this, we need to include some JavaScript code which is distributed with the RFirefox package. Specifically we need the <js:function>callRFunction</js:function> javascript function, which, as its name implies, will allow us to invoke an R function from JavaScript code. This function, as well as other useful JavaScript functions can be found in the file RFirefox/inst/javascript/Rhelpers.js within the sources of the package (or RFirefox/javascript/Rhelpers.js within an installed version of the package). Web pages which want to do more than run blocks of R code upon loading will need to include this file within a script tag, like so (note the path within the src attribute will need to change to reflect where this file is relative to one of the two locations of Rhelpers.js mentioned above):
      <programlisting>
	<![CDATA[
		 <script type="text/javascript" src="../javascript/Rhelpers.js"></script>
	]]>
      </programlisting>
    </para>
    <para>
      The <js:function>callRFunction</js:function> is designed to offer <r:function>do.call</r:function>-like functionality. As such, regardless of the function being called, it has exactly three arguments, which, in order, are :
      <itemizedlist>
	<listitem>
	  <para>
	    name -- This argument expects a javascript string either containing the name of the R function to be called or directly representing an R function object (see section Returning R Values to Javascript).
	  </para>
	</listitem>
	<listitem>
	  <para>
	    args -- This argument accepts a (possibly nested) JavaScript array representing the list of all arguments to be passed to the function (see section Mapping JavaScript Arrays to R Lists).
	  </para>
	</listitem>
	<listitem>
	  <para>
	    singleArg -- This argument is currently ignored (and will probably be renamed) but will eventually serve to give the user more direct control over how a JavaScript array is translated into an R list.
	  </para>
	</listitem>
      </itemizedlist>
    </para>
    <para>
      Once we have included Rhelpers.js, we can utilize the <js:function>callRFunction</js:function> in our JavaScript code like so:
      <programlisting>
	<![CDATA[
		 <script type="text/javascript">
		   var args =[ [ 1, 1.5, 1, 2, 1, 3], [3, 4, 5, 6, 7, 5] ];
		   var cor = callRFunction("cor", args);
		   alert(cor);
		 </script>
	  ]]>
      </programlisting>
    </para>
    <para>
      When <js:function>callRFunction</js:function> is used the following steps are taken internally to generate the resulting value:
      <itemizedlist>
	<listitem>
	  The function to be called is identified. If the name of the function is passed in then nothing needs to be done at this stage. If the string passed into the name argument directly represents an R function object (more on how this can happen in the next section) then it is converted into the R function object in question.
	</listitem>
	<listitem>
	  The JavaScript array passed in as the args parameter is converted into an R list containing the 0 or more arguments to be passed to the function identified in the above step.
	</listitem>
	<listitem>
	  An R expression representing a call to <r:function>do.call</r:function> utilizing with respect to the function and arguments identified above is constructed and evaluated.
	</listitem>
	<listitem>
	  The return value from the <r:function>do.call</r:function> call is converted back to JavaScript and returned. NOTE: This is a simplification. See the next section for a detailed description of the process.
	</listitem>
      </itemizedlist>
    </para>
  </sect2>
  <sect2>
    <title>Communicating with the R Engine (Details)</title>
    <para>
      There are a couple of structural hurdles which prevent the communication with R of JavaScript running in our webpage(s) from being a simple and straightforward matter. The first and most important is that there are actually two types of JavaScript in play when we call R functions, privileged code and unprivileged code.
    </para>
    <para>
      Privileged JavaScript code is code that ships with the RFirefox Firefox extension itself. This code is able to communicate with compiled C code also included in the extension, which in turn allows it to start and communicate with the embedded R session.
    </para>
    <para>
      Unprivileged JavaScript code, on the other hand, is code included using script tags into the webpage itself. This is often (though not always) written directly by the author of the webpage. The problem being that unprivileged code cannot see or communicate directly with privileged code. This means that the privileged javascript function capable of calling down to an R function cannot be directly seen or called by the JavaScript in our webpages. This prohibition is enforced as a completely understandable security feature (one does not, in generally, want JavaScript code written by anonymous webpage authors to have full (relatively) unfettered access to the client's system, which access to compiled C code can grant -- and, in fact, does in our case).
    </para>
    <para>
      To get around this issue (which from a security standpoint we arguably should not be doing, but which is necessary to get RFirefox off the ground) we exploit a somewhat subtle fact about the Firefox extension framework. That is that Privileged code is able to attach event handlers. What this means is that functions created in privileged code can be called in response to JavaScript events. This, combined with the fact that unprivileged code can create and fire events, allows for de facto communication between privileged and unpriveleged code.
    </para>
    <para>
      This may sound like a serious security bug in danger of being closed at any time, but it is actually allowed by design. In fact the above solution was found in the official Mozilla page regarding communication between privileged and unprivileged code, found <a href="https://developer.mozilla.org/en/Code_snippets/Interaction_between_privileged_and_non-privileged_pages" >here</a>
    </para>
    <para>
      It should be noted that privileged and non-privileged code are still not directly communicating with eachother. That is, we cannot call a privileged code function with arguments that are variables in non-privileged code. What we can (and have) do, however, is to design our privileged code to expect the arguments to be passed as an attribute of the target of the event, and add said attribute before firing the event from non-privileged code.
    </para>
    <para>
      It is notable here that DOM element (in this case the target of our custom event) attributes must be strings. This is much less of a restriction than it may seem, however, because (nearly) any JavaScript object can be serialized to a string using JSON (JavaScript Object Notation), the facilities for which are built into the JavaScript engine.
    </para>
    <para>
      To return the results of our R call, we simply reverse the above communication protocol, setting a different attribute on the target to the JSON version of the JavaScript version of the returned R object.
    </para>
  </sect2>
  <sect2>
    <title>Returning R Values to Javascript</title>
  </sect2>
  <sect2>
    <title>R functions as Javascript Event Handlers</title>
  </sect2>
  <sect2>
    <title>Mapping JavaScript Arrays to R Lists</title>
    <para>
      There is not a one-to-one mapping between JavaScript Arrays and R Lists. To see why we consider a number of illustrative examples, the first of which is the series of numbers between 1 and 3 (inclusive). In JavaScript there is only one (standard) way to represent these numbers in an Array:
      <js:code>
	var myArray = [1, 2, 3];
      </js:code>
      This creates a one-dimensional array of length 5 containing the values in the series (there are other ways to create the same array, but the array itself, not how we create it, is the important point here).
    </para>
    <para>
      In R, on the other hand, we have two ways to represent this series
      <r:code>
	myVec = 1:3
	print(myVec)
      </r:code>
      and 
      <r:code>
	myList = list(1, 2, 3)
	print(myList)
      </r:code>
    </para>
    <para>
      The problem arises when we go to automatically translate the JavaScript object myArray created in the JS snippet above into an R object. Should it be converted into a vector (a la myVec) or a list (a la myList)? It is fairly clear that the "most correct" R object for storing the series of numbers is a vector. Why then do we have a problem?
    </para>
    <para>
      The problem is that while similar, the <r:object>myVec</r:object> and <r:object>myList</r:object> R objects are actually syntatically different
    </para>
  </sect2>
 
</sect1>
<sect1>
  <title>Invoking Javascript Code from R</title>
  <sect2>
    <title>Representing Javascript Objects Within R</title>
  </sect2>
  <sect2>
    <title>Directly Calling Javascript Functions/Methods by Name</title>
  </sect2>
  <sect2>
    <title>Directly Calling Javascript Functions by Reference</title>
  </sect2>
  <sect2>
    <title>Evaluating Javascript Code</title>
  </sect2>
  <sect2>
    <title> Adding Event Listeners from Within R</title>
  </sect2>
</sect1>

</article>